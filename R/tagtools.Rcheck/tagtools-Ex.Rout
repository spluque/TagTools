
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tagtools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "tagtools-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('tagtools')

Attaching package: 'tagtools'

The following object is masked from 'package:stats':

    smooth

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2pr")
> ### * a2pr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: a2pr
> ### Title: Pitch and roll from acceleration
> ### Aliases: a2pr
> 
> ### ** Examples
> 
> ## Not run: 
> ##D samplematrix <- matrix(c(0.77, -0.6, -0.22, 0.45, -0.32, 0.99, 0.2, -0.56, 0.5), 
> ##D                        byrow = TRUE, nrow = 3)
> ##D list <- a2pr(samplematrix)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("a2pr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("absorption")
> ### * absorption
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: absorption
> ### Title: Calculates the absorption coefficient for sound in seawater
> ### Aliases: absorption
> 
> ### ** Examples
> 
> absorption(140e3,13,10)
[1] 0.04354982
>          #Returns: 0.04354982 dB
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("absorption", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("acc_wgs84")
> ### * acc_wgs84
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: acc_wgs84
> ### Title: Calculate total acceleration
> ### Aliases: acc_wgs84
> 
> ### ** Examples
> 
> acc_wgs84(50)
[1] 9.810704
>          #Returns: 9.8107 m/s^2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("acc_wgs84", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("add_nc")
> ### * add_nc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: add_nc
> ### Title: Save an item to a NetCDF or add one tag sensor or metadata
> ###   variable to a NetCDF archive file. Add one tag sensor or metadata
> ###   variable to a NetCDF archive file. If the archive file does not
> ###   exist, it is created. The file is assumed to be in the current
> ###   working directory unless a pathname is added to the beginning of
> ###   fname.
> ### Aliases: add_nc
> 
> ### ** Examples
> 
>  ## Not run: 
> ##D  #if A is in workspace,
> ##D  #add_nc('dog17_124a',A)
> ##D  # generates a file dog17_124a.nc (if it does not already exist) and adds a variable A.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("add_nc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("apply_cal")
> ### * apply_cal
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: apply_cal
> ### Title: Implement a calibration on tag sensor data
> ### Aliases: apply_cal
> 
> ### ** Examples
> 
> #coming soon!
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("apply_cal", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("block_acf")
> ### * block_acf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: block_acf
> ### Title: Compute autocorrelation function
> ### Aliases: block_acf
> ### Keywords: assessment correlation, model visualization,
> 
> ### ** Examples
> 
> block_acf(resids=ChickWeight$weight, 
+           blocks=ChickWeight$Chick)
          [,1]
[1,] 1.0000000
[2,] 0.6893477
[3,] 0.3628922
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("block_acf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("block_mean")
> ### * block_mean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: block_mean
> ### Title: Compute mean of sample blocks
> ### Aliases: block_mean
> 
> ### ** Examples
> 
> samplematrix <- matrix(c(1,3,5,7,9,11,13,15,17), byrow = TRUE, ncol = 3)
>          list <- block_mean(samplematrix, n = 3, nov = 1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("block_mean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("block_rms")
> ### * block_rms
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: block_rms
> ### Title: Compute RMS of sample blocks
> ### Aliases: block_rms
> 
> ### ** Examples
> 
> X <- matrix(c(1:20), byrow = TRUE, nrow = 4)
> block_rms(X, n = 2, nov = NULL)
$Y
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,]  4.301163  5.147815  6.041523  6.964194  7.905694
[2,] 13.729530 14.713939 15.700318 16.688319 17.677670

$t
[1] 1 3

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("block_rms", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("body_axes")
> ### * body_axes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: body_axes
> ### Title: Generate the cardinal axes of an animal
> ### Aliases: body_axes
> 
> ### ** Examples
> 
> samplematrix1 <- matrix(c(7,2,3,6,4,9), byrow = TRUE, ncol = 3)
>          samplematrix2 <- matrix(c(6,5,3,4,8,9), byrow = TRUE, ncol = 3)
>          W <- body_axes(A = samplematrix1, M = samplematrix2, fc = NULL)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("body_axes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("buffer")
> ### * buffer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: buffer
> ### Title: Buffers a signal vector into matrix
> ### Aliases: buffer
> 
> ### ** Examples
> 
> x <- c(1:10)
>          n <- 3
>          p <- 2
>          opt <- c(2,1)
>          list1 <- buffer(x, n, p, opt)
>          list2 <- buffer(x, n, p, nodelay = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("buffer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check_AM")
> ### * check_AM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check_AM
> ### Title: Compute field intensity of tag acceleration and magnetometer
> ###   data.
> ### Aliases: check_AM
> 
> ### ** Examples
> 
> ## Not run: 
> ##D AMcheck <- check_AM(A=matrix(c(-0.3,0.52,0.8), nrow=1),
> ##D                     M=matrix(c(22,-22,14), nrow=1),
> ##D                     fs=1)
> ##D #returns AMcheck$fstr = 1.0002, 34.11744 and AMcheck$incl = 0.20181 radians
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check_AM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cline")
> ### * cline
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cline
> ### Title: Add colored line segments to a plot
> ### Aliases: cline
> ### Keywords: time-series visualization,
> 
> ### ** Examples
> 
> cline(x=ChickWeight$Time, y=ChickWeight$weight, 
+       z=as.factor(ChickWeight$Diet), 
+       color_vector=c('black', 'grey20', 
+                      'grey50', 'grey70'))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cline", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("crop")
> ### * crop
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crop
> ### Title: Interactive data cropping tool.
> ### Aliases: crop
> 
> ### ** Examples
> 
> data <- beaked_whale
>          Pc <- crop(data$P)		#interactively select a section of data
[1] "Position your cursor and then click once followed by clicking FINISH to change the start, or click twice in the same spot followed by clicking FINISH to change the end. If you wish to change both the start and end click once at the start time desired and twice at the end time desired."
>          Ydata <- list(depth = Pc$Y)
>          plott(Ydata)
>          #plot shows the cropped section
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crop", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("crop_all")
> ### * crop_all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crop_all
> ### Title: Reduce the time span of a dataset
> ### Aliases: crop_all
> 
> ### ** Examples
> 
> d <- find_dives(beaked_whale$P,300)
>          X <- crop_all(c(d$start[1], d$end[1]), beaked_whale)	#crop all data to 1st dive
>          plott(X=list(X$P, X$A), r = c(1,0), panel_labels=c('Depth', 'Acc'))
>          #plot shows the dive profile and acceleration of the second dive
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crop_all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("crop_to")
> ### * crop_to
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crop_to
> ### Title: Reduce the time span of data
> ### Aliases: crop_to
> 
> ### ** Examples
> 
>          d <- find_dives(beaked_whale$P,300)
>          P2 <- crop_to(beaked_whale$P, tcues = c(d$start[1], d$end[1]))	#crop to 1st dive
>          plott(list(P2$X), r=c(1), panel_labels=c('Depth'))
>          #plot shows the dive profile of the selected dive
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crop_to", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("csv2struct")
> ### * csv2struct
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: csv2struct
> ### Title: Read tag metadata from csv
> ### Aliases: csv2struct
> 
> ### ** Examples
> 
> ## Not run: 
> ##D S <- csv2struct('testset1')
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("csv2struct", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("decdc")
> ### * decdc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: decdc
> ### Title: Reduce the sampling rate
> ### Aliases: decdc
> 
> ### ** Examples
> 
> s <- matrix(sin(2 * pi / 100 * c(0:1000) - 1), ncol = 1)
> y <- decdc(x = s, df = 4)
> #Returns: 0.0023
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("decdc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("decz")
> ### * decz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: decz
> ### Title: Decimate sampling rate recursively.
> ### Aliases: decz
> 
> ### ** Examples
> 
> # Decimate beaked whale acceleration data from testset1 by a factor of 10
> # in 3 chunks
> ## Not run: 
> ##D bw <- load_nc('data/testset1.nc')
> ##D a_rows <- nrow(bw$A$data)
> ##D a_ind <- data.frame(start=c(1, floor(a_rows/3), floor(2*a_rows/3)))
> ##D a_ind$end <- c(a_ind$start[2:3] - 1, a_rows)
> ##D df <- 10
> ##D Z <- NULL
> ##D y <- NULL
> ##D for (k in 1:nrow(a_ind)){
> ##D   decz_out <- decz(x=bw$A$data[c(a_ind[k,1]:a_ind[k,2]), ],
> ##D                      df=df, Z=Z)
> ##D   df <- NULL
> ##D   Z <- decz_out$Z 
> ##D   y <- rbind(y,decz_out$y)
> ##D }
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("decz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("depth2pressure")
> ### * depth2pressure
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: depth2pressure
> ### Title: Convert depth to pressure
> ### Aliases: depth2pressure
> 
> ### ** Examples
> 
> depth2pressure(1000, 27)
[1] 10075403
>          #Returns: 10075403 Pa
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("depth2pressure", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("depth_rate")
> ### * depth_rate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: depth_rate
> ### Title: Estimate the vertical velocity
> ### Aliases: depth_rate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D v <- depth_rate(p = beaked_whale$P)
> ##D plott(list(beaked_whale$P$data, v), fs=beaked_whale$P$sampling_rate, 
> ##D r=c(1,0), panel_labels=c('Depth\n(m)', 'Vertical Velocity\n(m/s)')) 
> ##D #plot of dive profile and depth rate
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("depth_rate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("detect_peaks")
> ### * detect_peaks
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: detect_peaks
> ### Title: Detect peaks in signal vector data
> ### Aliases: detect_peaks
> 
> ### ** Examples
> 
> ## Not run: 
> ##D BW <- beaked_whale
> ##D detect_peaks(data = BW$A$data, sr = BW$A$sampling_rate, FUN = njerk, thresh = NULL, bktime = NULL, plot_peaks = NULL, fs = BW$A$sampling_rate)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("detect_peaks", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dsf")
> ### * dsf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dsf
> ### Title: Estimate the dominant stroke frequency
> ### Aliases: dsf
> 
> ### ** Examples
> 
> #coming soon!
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dsf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("euler2rotmat")
> ### * euler2rotmat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: euler2rotmat
> ### Title: Make a rotation (or direction cosine) matrix
> ### Aliases: euler2rotmat
> 
> ### ** Examples
> 
> vec1 <- matrix(c(1:10), nrow = 10)
>          vec2 <- matrix(c(11:20), nrow = 10)
>          vec3 <- matrix(c(21:30), nrow = 10)
>          Q <- euler2rotmat(p = vec1, r = vec2, h = vec3) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("euler2rotmat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extract")
> ### * extract
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract
> ### Title: Extract a sub-sample of data
> ### Aliases: extract
> 
> ### ** Examples
> 
> BW <- beaked_whale
> extract(x = BW$A$data, sampling_rate = BW$A$sampling_rate, tst = 3, ted = 100)
              [,1]          [,2]      [,3]
 [1,]  0.359353567  0.0740137342 0.8712770
 [2,] -0.077931739 -0.0819311791 0.9551228
 [3,] -0.301606964 -0.2120884869 0.9020090
 [4,] -0.246412954 -0.1765318686 0.9647387
 [5,] -0.159174577 -0.0977487930 1.0446557
 [6,] -0.147319041 -0.0669413730 0.9646837
 [7,] -0.098077929 -0.0245823711 0.9554624
 [8,]  0.009598672 -0.0378381947 1.0513772
 [9,]  0.219067566  0.0208593498 1.0337585
[10,]  0.407521613  0.0837601168 0.8521666
[11,]  0.237916597 -0.0006010238 0.8910755
[12,] -0.160812378  0.0082994583 1.0128137
[13,] -0.326421787 -0.0233040953 0.9297769
[14,] -0.291309381 -0.0924453263 0.9603509
[15,] -0.350049094 -0.0611884309 0.9637004
[16,] -0.283548018 -0.0837481949 0.9436157
[17,] -0.129484069 -0.0447882291 0.9952420
[18,] -0.086746174 -0.0694651113 0.9942092
[19,] -0.042561297 -0.0766761343 1.0015410
[20,]  0.133620569 -0.0182216757 1.0344031
[21,]  0.378364184 -0.0329534169 0.9503804
[22,]  0.311084178  0.0114752462 0.8499618
[23,] -0.061575390  0.0263671180 0.9448094
[24,] -0.275594818  0.0100324648 1.0059493
[25,] -0.255330560 -0.0074074994 0.9867141
[26,] -0.280400819 -0.0122309443 0.9534131
[27,] -0.243873617 -0.0323334034 0.9539954
[28,] -0.033006679 -0.0469847267 1.0195104
[29,]  0.136211494  0.0234239363 1.0312311
[30,]  0.387141901  0.0330023097 0.9417306
[31,]  0.470581501 -0.0007027594 0.8231513
[32,]  0.103192038  0.0130153486 0.9299108
[33,] -0.145103562 -0.0069316867 1.0513772
[34,] -0.225676198 -0.0826042329 0.9359654
[35,] -0.316131516 -0.1072972149 0.9119763
[36,] -0.212802737 -0.0832102448 1.0057865
[37,] -0.094516307 -0.0589526910 1.0274974
[38,]  0.013638832 -0.0268900412 1.0068812
[39,]  0.288855733  0.0369511439 0.9694065
[40,]  0.457368690  0.0497775504 0.8747854
[41,]  0.194268563 -0.0310481060 0.8877674
[42,] -0.129789890 -0.1102572056 1.0390674
[43,] -0.229179017 -0.0344801723 0.9977547
[44,] -0.325044625 -0.0377363209 0.8774684
[45,] -0.240522696 -0.1372373537 0.9608579
[46,] -0.019108451 -0.0137549226 1.0331258
[47,]  0.116596164  0.0012622162 1.0415130
[48,]  0.342587179 -0.0639029574 0.9666331
[49,]  0.409972471  0.0407577288 0.8486385
[50,]  0.076006127  0.0259095513 0.9121590
[51,] -0.182267232 -0.1437875212 0.9924554
[52,] -0.198164234 -0.1491726719 1.0004716
[53,] -0.269926841 -0.0120613156 0.9667695
[54,] -0.273809451  0.0040281400 0.9475897
[55,] -0.092236949 -0.0232454676 0.9898177
[56,]  0.100726385 -0.0383335459 1.0290936
[57,]  0.325774301 -0.0491489633 0.9833272
[58,]  0.418483685  0.0193166202 0.8876654
[59,]  0.131091879  0.0479487757 0.9206949
[60,] -0.226798313  0.0197961137 0.9578922
[61,] -0.331655473 -0.0036184684 0.9396418
[62,] -0.274005911 -0.0168312160 0.9804647
[63,] -0.290539927 -0.0172855342 0.9845927
[64,] -0.305151044 -0.0045026034 0.9636764
[65,] -0.177366766 -0.0105339894 0.9645688
[66,] -0.074895988 -0.0555228038 0.9863405
[67,]  0.078467083 -0.0381752894 1.0288020
[68,]  0.342561649 -0.0276366769 1.0111551
[69,]  0.491536121 -0.0100946591 0.8667591
[70,]  0.265047636  0.0225219441 0.8238848
[71,] -0.114906269  0.0160899734 0.9948660
[72,] -0.307208667 -0.0182221398 0.9906380
[73,] -0.342640626 -0.0923519953 0.8905236
[74,] -0.221588763 -0.0919093664 0.9979014
[75,] -0.031502986 -0.0543362685 1.0519329
[76,]  0.058369870  0.0031200269 0.9791157
[77,]  0.114635939  0.0588836512 0.9891672
[78,]  0.375773230 -0.0298213661 0.9496757
[79,]  0.443885045 -0.0718207878 0.8737444
[80,]  0.018616023  0.0024824369 0.9453466
[81,] -0.245656922 -0.0496538435 0.9682467
[82,] -0.230977573 -0.0099943369 0.9605742
[83,] -0.332988144  0.0406231944 0.9507593
[84,] -0.408680700 -0.0576346165 0.9135399
[85,] -0.257934630  0.0275143864 0.9833678
[86,] -0.270586140  0.0554195365 0.9765012
[87,] -0.416996833 -0.0082451865 0.8864101
[88,] -0.290355870  0.0576799550 0.9406754
[89,] -0.152320531  0.1046671518 1.0099117
[90,] -0.152273619  0.0378132093 1.0078762
[91,] -0.121874274 -0.0389983913 0.9891947
[92,] -0.007790740 -0.0078124526 0.9897129
[93,]  0.161962424 -0.0215814825 0.9937589
[94,]  0.299806369 -0.0880273105 0.9874128
[95,]  0.435064510 -0.0189969897 0.9199355
[96,]  0.437887685  0.0652293476 0.8063729
[97,]  0.084631782  0.0431209470 0.9311981
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extract_cues")
> ### * extract_cues
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_cues
> ### Title: Extract multiple sub-samples of data
> ### Aliases: extract_cues
> 
> ### ** Examples
> 
> BW <- beaked_whale
> list <- extract_cues(x = BW$A$data, sampling_rate = BW$A$sampling_rate, cues = 6, len = 11)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_cues", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("find_dives")
> ### * find_dives
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: find_dives
> ### Title: Find time cues for dives
> ### Aliases: find_dives
> 
> ### ** Examples
> 
> BW <- beaked_whale
> T <- find_dives(p = BW$P$data, sampling_rate = BW$P$sampling_rate, mindepth = 5, surface = 2, findall = NULL)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("find_dives", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fir_nodelay")
> ### * fir_nodelay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fir_nodelay
> ### Title: Delay-free filtering
> ### Aliases: fir_nodelay
> 
> ### ** Examples
> 
> ## Not run: 
> ##D          #Make a waveform with two harmonics - one at 1/20 and another at 1/4 of the sampling rate.
> ##D          x <- sin(t(2 * pi * 0.05 * (1:100)) +
> ##D                 t(cos(2 * pi * 0.25 * (1:100))))
> ##D          Y <- fir_nodelay(x=x, n=30, fc=0.2, qual='low')
> ##D          plot(c(1:length(x)),x, type='l', col='grey42',
> ##D          xlab='index', ylab='input x and output y')
> ##D          lines(c(1:length(Y$y)),Y$y, lwd=2)
> ##D          #Returns: The input signal has the first and fifth harmonic. 
> ##D          #Applying the low-pass filter removes most of the fifth harmonic
> ##D          # so the output appears as a sinewave except for the first few 
> ##D          #samples which are affected by the filter startup transient.
> ##D          
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fir_nodelay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fix_offset_3d")
> ### * fix_offset_3d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fix_offset_3d
> ### Title: Estimate the offset in each axis
> ### Aliases: fix_offset_3d
> 
> ### ** Examples
> 
> #Will come soon!
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fix_offset_3d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fix_pressure")
> ### * fix_pressure
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fix_pressure
> ### Title: Correct a depth or altitude profile
> ### Aliases: fix_pressure
> 
> ### ** Examples
> 
> #Example Coming Soon!
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fix_pressure", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hilbert_env")
> ### * hilbert_env
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hilbert_env
> ### Title: Compute the envelope of X using Hilbert transform.
> ### Aliases: hilbert_env
> 
> ### ** Examples
> 
> ## Not run: 
> ##D s <- matrix(sin(0.1*c(1:10000)), ncol=1)*
> ##D      matrix(sin(0.001*c(1:10000)), ncol=1)
> ##D E <- hilbert_env(s)
> ##D #E contains 3 positive half cycles of a sine wave that trace 
> ##D #the upper limit of signal s.
> ##D plot(c(1:length(s)), s, col='grey34')
> ##D lines(c(1:length(E)), E, col='black')
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hilbert_env", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("htrack")
> ### * htrack
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: htrack
> ### Title: Simple horizontal dead-reckoned track
> ### Aliases: htrack
> 
> ### ** Examples
> 
> ## Not run: 
> ##D BW <- beaked_whale
> ##D htrack(A = BW$A$data, M = BW$M$data, s = 4, sampling_rate = BW$A$sampling_rate, fc = NULL)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("htrack", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inclination")
> ### * inclination
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inclination
> ### Title: Estimate the inclination angle
> ### Aliases: inclination
> 
> ### ** Examples
> 
> ## Not run: 
> ##D A <- matrix(c(1, -0.5, 0.1, 0.8, -0.2, 0.6, 0.5, -0.9, -0.7),
> ##D            byrow = TRUE, nrow = 3, ncol = 3)
> ##D M <- matrix(c(1.3, -0.25, 0.16, 0.78, -0.3, 0.5, 0.5, -0.49, -0.6),
> ##D                       byrow = TRUE, nrow = 3, ncol = 3)
> ##D incl <- inclination(A, M)
> ##D #Results: incl = -0.91595 radians.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inclination", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inv_axis")
> ### * inv_axis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inv_axis
> ### Title: Identify invariant axis in triaxial movement measurements.
> ### Aliases: inv_axis
> 
> ### ** Examples
> 
>  ## Not run: 
> ##D  s <- matrix(sin(2*pi*0.1*c(1:100)), ncol=1)
> ##D  A <- s %*% c(0.9, -0.4, 0.3) + s^2 %*% c(0, 0.2, 0.1)
> ##D  inv_axis_out <- inv_axis(A)
> ##D    
> ## End(Not run)
>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inv_axis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("julian_day")
> ### * julian_day
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: julian_day
> ### Title: Convert between dates and Julian day numbers.
> ### Aliases: julian_day
> 
> ### ** Examples
> 
> julian_day(y = 2016, d = 12, m =10) #Returns: 286
[1] 286
>          julian_day(y = 2016, 286) #Returns: "2016-10-12"
[1] "2016-10-12"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("julian_day", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("load_nc")
> ### * load_nc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: load_nc
> ### Title: Load a tag dataset from a netCDF file.
> ### Aliases: load_nc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #Note: must have the file testset1.nc saved in current working directory for this to work
> ##D #load_nc('testset1.nc')
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("load_nc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("m2h")
> ### * m2h
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: m2h
> ### Title: Heading from accelerometer and magnetometer data
> ### Aliases: m2h
> 
> ### ** Examples
> 
> ## Not run: 
> ##D m2h_out <- m2h(M = matrix(c(22, -24, 14), nrow = 1), 
> ##D                         A = matrix(c(-0.3, 0.52, 0.8), nrow = 1))
> ##D #Returns: h=0.89486 radians, v=34.117, incl=0.20181 radians.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("m2h", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("m_dist")
> ### * m_dist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: m_dist
> ### Title: Calculate Mahalanobis distance
> ### Aliases: m_dist
> 
> ### ** Examples
> 
> ## Not run: 
> ##D BW <- beaked_whale
> ##D dframe <- m_dist(BW$A$data, BW$A$sampling_rate)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("m_dist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("make_specgram")
> ### * make_specgram
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: make_specgram
> ### Title: Plot a spectrogram with default settings
> ### Aliases: make_specgram
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- signal::chirp(seq(from=0, by=0.001, to=2),f0=0,
> ##D t1=2,f1=500)
> ##D fs <- 2
> ##D nfft <- 256
> ##D numoverlap <- 128
> ##D window = signal::hanning(nfft)
> ##D #Spectrogram plot
> ##D make_specgram(x,nfft,fs,window,numoverlap) 
> ##D # or calculate and don't plot
> ##D S <- make_specgram(x,nfft,fs,window,numoverlap, draw_plot=FALSE) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("make_specgram", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mean_absorption")
> ### * mean_absorption
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mean_absorption
> ### Title: Calculate the mean absorption in salt water
> ### Aliases: mean_absorption
> 
> ### ** Examples
> 
> mean_absorption(c(25e3, 60e3), 1000, c(0, 700))
         [,1]
[1,] 7.728188
>          #Returns: 7.728188 dB/m
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mean_absorption", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("median_filter")
> ### * median_filter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: median_filter
> ### Title: Computes the nth-order median filter
> ### Aliases: median_filter
> 
> ### ** Examples
> 
> v <- matrix(c(1, 3, 4, 4, 20, -10, 5, 6, 6, 7), ncol = 1)
> w <- median_filter(v, n=3)
> #Returns : c(1, 3, 4, 4, 4, 5, 5, 6, 6, 7)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("median_filter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("merge_fields")
> ### * merge_fields
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: merge_fields
> ### Title: Merge the fields of two lists
> ### Aliases: merge_fields
> 
> ### ** Examples
> 
> s1 <- list( a = 1, b = c(2,3,4))
>          s2 <- list( b = 3, c = 'cat')
> 	      s <- merge_fields(s1,s2)
> 	      s #yields list( a = 1, b = c(2,3,4), c = 'cat')
$a
[1] 1

$b
[1] 2 3 4

$c
[1] "cat"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("merge_fields", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("msa")
> ### * msa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: msa
> ### Title: Compute MSA
> ### Aliases: msa
> 
> ### ** Examples
> 
> sampleMatrix = matrix(c(1, -0.5, 0.1, 0.8, -0.2, 0.6, 0.5, -0.9, -0.7),
+                       byrow = TRUE, nrow = 3, ncol = 3)
> msa(A=sampleMatrix, ref=1)  
Error in nrow(a) : object 'a' not found
Calls: msa -> nrow
Execution halted
